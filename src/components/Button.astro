---
interface Props {
    name: string;
    link?: string;
    type?: "primary" | "secondary" | "special";
    buttonType?: "button" | "submit" | "reset";
}

const { name, link, type, buttonType } = Astro.props;
---

{
    link ? (
        <a href={link} class={`btn ${type}`}>
            {name}
        </a>
    ) : (
        <button type={buttonType} class={`btn ${type}`}>
            {name}
        </button>
    )
}

<style>
    .btn {
        align-items: center;
        border-radius: 5px;
        border: 1px solid transparent;
        padding: 5px 10px;
        display: inline-flex;
        justify-content: center;
        flex-shrink: 0;
        font-size: 1rem;
        font-weight: 500;
        line-height: 1.25rem;
        min-height: 38px;
        transition: all 0.2s ease;
        color: #eee;
        background: black;
        text-decoration: none;
    }

    .btn.primary {
        background-color: black;
        color: #fff;
    }

    .btn.primary:hover {
        background-color: var(--accent-color-hover);
    }

    .btn.secondary {
        border: 1px solid black;
        background-color: transparent;
        color: black;
    }

    .btn.secondary:hover {
        background-color: var(--accent-color-light);
    }

    .btn.special {
        width: 100%;
        padding: 0.75rem;
        border: none;
        border-radius: 8px;
        background: linear-gradient(270deg, #ff00ff, #ff69b4, #ff1493, #ff00ff);
        background-size: 400% 400%;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn.special:hover {
        animation: pinkGradient 3s ease infinite;
    }

    @keyframes pinkGradient {
        0% {
            background-position: 0% 50%;
        }
        50% {
            background-position: 100% 50%;
        }
        100% {
            background-position: 0% 50%;
        }
    }
</style>